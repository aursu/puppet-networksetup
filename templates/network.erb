<%-
def bool2config(b)
    case b.to_s
    when '1', 'true'
        'yes'
    when '0', 'false'
        'no'
    else
        b.to_s
    end
end
-%>
# NETWORKING=yes|no
<% unless @networking.nil? -%>
NETWORKING=<%= bool2config(@networking) %>
<% end -%>
# GATEWAY=<gateway IP>
# GATEWAYDEV=<gateway device to use, when multiple devices have GATEWAY=> (e.g. eth0)
# NISDOMAIN=<nis domain name>
# NOZEROCONF=
#   Set this to not set a route for dynamic link-local addresses.
<% if @nozeroconf -%>
NOZEROCONF=yes
<% end -%>
#
# NETWORKDELAY=<delay in seconds>
#   Delay in seconds after all network interfaces are initialized.  Useful if
#   network has spanning tree running and must wait for STP convergence.
#   Default: 0 (no delay)
#
# IFDOWN_ON_SHUTDOWN=yes|no
#   If yes, do bring interfaces down during system shutdown. If no, leave them
#   in their current state (this is only supported on hosts using systemd).
#   Default: yes (bring interfaces down)
#
# IPV6FORWARDING=yes|no
#   Enable or disable global forwarding of incoming IPv6 packets
#   on all interfaces.
#   Note: Actual packet forwarding cannot be controlled per-device, use netfilter6 for such issues
#   Default: no
#
# IPV6_AUTOCONF=yes|no
#   Sets the default for device-based autoconfiguration.
#   Default: yes if IPV6FORWARDING=no, no if IPV6FORWARDING=yes
<% unless @ipv6_autoconf.nil? -%>
IPV6_AUTOCONF=<%= bool2config(@ipv6_autoconf) %>
<% end -%>
# IPV6_ROUTER=yes|no
#   Sets the default for device-based Host/Router behaviour.
#   Default: yes if IPV6FORWARDING=yes, no if IPV6FORWARDING=no
# IPV6_AUTOTUNNEL=yes|no
#   Controls automatic IPv6 tunneling.
#   Default: no
#
# IPV6_DEFAULTGW=<IPv6 address[%interface]> (optional)
#   Add a default route through specified gateway
#   An interface can be specified: required for link-local addresses
#   Examples:
#     IPV6_DEFAULTGW="3ffe:ffff:1234:5678::1"
#       Add default route through 3ffe:ffff:1234:5678::1
#     IPV6_DEFAULTGW="3ffe:ffff:1234:5678::1%eth0"
#       Add default route through 3ffe:ffff:1234:5678::1 and device eth0
#     IPV6_DEFAULTGW="fe80::1%eth0"
#       Add default route through fe80::1 and device eth0
#
# Note: if IPV6_DEFAULTGW is specified with %interface scope and it
#       doesn't match IPV6_DEFAULTDEV, IPV6_DEFAULTDEV is ignored.
# Note: it's preferred to use %interface for all addresses, not
#       just link-local if you have multiple IPv6-enabled interfaces.
<% if @ipv6_defaultgw -%>
IPV6_DEFAULTGW="<%= @ipv6_defaultgw %>"
<% end -%>
#
# IPV6_DEFAULTDEV=<interface> (optional)
#   Add a default route through specified interface without specifying next hop
#   Type of interface will be tested whether this is allowed
#   Examples:
#     IPV6_DEFAULTDEV="eth0" INVALID example!
#     IPV6_DEFAULTDEV="ppp0"
#     IPV6_DEFAULTDEV="sit1"
#   Examples for 6to4
#     IPV6_DEFAULTDEV="tun6to4"
#       Add default route through dedicated 6to4 tunnel device "tun6to4", if configured
#
# Note: "tun6to4" does not support an additional IPV6_DEFAULTGW.
#       Other interfaces prefer IPV6_DEFAULTGW, if specified.
#
# IPV6_RADVD_PIDFILE=<pid-file> (optional)
#   Location of PID file for controlling radvd, see IPV6_CONTROL_RADVD
#   Default: "/var/run/radvd/radvd.pid"
#   Example:
#      IPV6_RADVD_PIDFILE="/some/other/location/radvd.pid"
# IPV6TO4_RADVD_PIDFILE=<pid-file> (obsolete)
#   As above, still supported for a while for backward compatibility.
# IPV6_RADVD_TRIGGER_ACTION=startstop|reload|restart|SIGHUP (optional)
#   How to trigger radvd in case of 6to4 or PPP action
#    startstop: radvd starts if interface goes up and stops
#      if interface goes down using initscript call of radvd with related parameter
#    reload|restart: initscript of radvd is called with this parameter
#    SIGHUP: signal HUP is sent to radvd, pidfile must be specified, if not the default
#   Default: SIGHUP
#
# IPv6 options above can be overridden in interface-specific configuration.
